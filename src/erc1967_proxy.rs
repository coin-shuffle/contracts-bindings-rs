pub use erc1967_proxy::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod erc1967_proxy {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AdminChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"BeaconUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Upgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"fallback\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"receive\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static ERC1967PROXY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        64,
        81,
        97,
        4,
        225,
        56,
        3,
        128,
        97,
        4,
        225,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        34,
        145,
        97,
        2,
        222,
        86,
        91,
        97,
        0,
        46,
        130,
        130,
        96,
        0,
        97,
        0,
        53,
        86,
        91,
        80,
        80,
        97,
        3,
        251,
        86,
        91,
        97,
        0,
        62,
        131,
        97,
        0,
        97,
        86,
        91,
        96,
        0,
        130,
        81,
        17,
        128,
        97,
        0,
        75,
        87,
        80,
        128,
        91,
        21,
        97,
        0,
        92,
        87,
        97,
        0,
        90,
        131,
        131,
        97,
        0,
        161,
        86,
        91,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        97,
        0,
        106,
        129,
        97,
        0,
        205,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        144,
        127,
        188,
        124,
        215,
        90,
        32,
        238,
        39,
        253,
        154,
        222,
        186,
        179,
        32,
        65,
        247,
        85,
        33,
        77,
        188,
        107,
        255,
        169,
        12,
        192,
        34,
        91,
        57,
        218,
        46,
        92,
        45,
        59,
        144,
        96,
        0,
        144,
        162,
        80,
        86,
        91,
        96,
        96,
        97,
        0,
        198,
        131,
        131,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        96,
        39,
        129,
        82,
        96,
        32,
        1,
        97,
        4,
        186,
        96,
        39,
        145,
        57,
        97,
        1,
        128,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        59,
        97,
        1,
        63,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        45,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        82,
        67,
        49,
        57,
        54,
        55,
        58,
        32,
        110,
        101,
        119,
        32,
        105,
        109,
        112,
        108,
        101,
        109,
        101,
        110,
        116,
        97,
        116,
        105,
        111,
        110,
        32,
        105,
        115,
        32,
        110,
        96,
        68,
        130,
        1,
        82,
        108,
        27,
        221,
        8,
        24,
        72,
        24,
        219,
        219,
        157,
        28,
        152,
        88,
        221,
        96,
        154,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        127,
        54,
        8,
        148,
        161,
        59,
        161,
        163,
        33,
        6,
        103,
        200,
        40,
        73,
        45,
        185,
        141,
        202,
        62,
        32,
        118,
        204,
        55,
        53,
        169,
        32,
        163,
        202,
        80,
        93,
        56,
        43,
        188,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        96,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        64,
        81,
        97,
        1,
        157,
        145,
        144,
        97,
        3,
        172,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        90,
        244,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        1,
        216,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        1,
        221,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        144,
        146,
        80,
        144,
        80,
        97,
        1,
        239,
        134,
        131,
        131,
        135,
        97,
        1,
        249,
        86,
        91,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        2,
        104,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        2,
        97,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        2,
        97,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        54,
        86,
        91,
        80,
        129,
        97,
        2,
        114,
        86,
        91,
        97,
        2,
        114,
        131,
        131,
        97,
        2,
        122,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        129,
        81,
        21,
        97,
        2,
        138,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        54,
        145,
        144,
        97,
        3,
        200,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        2,
        213,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        2,
        189,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        241,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        132,
        1,
        81,
        144,
        146,
        80,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        97,
        3,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        129,
        129,
        17,
        21,
        97,
        3,
        75,
        87,
        97,
        3,
        75,
        97,
        2,
        164,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        3,
        115,
        87,
        97,
        3,
        115,
        97,
        2,
        164,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        136,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        3,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        157,
        131,
        96,
        32,
        131,
        1,
        96,
        32,
        136,
        1,
        97,
        2,
        186,
        86,
        91,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        3,
        190,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        2,
        186,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        130,
        81,
        128,
        96,
        32,
        132,
        1,
        82,
        97,
        3,
        231,
        129,
        96,
        64,
        133,
        1,
        96,
        32,
        135,
        1,
        97,
        2,
        186,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        145,
        144,
        145,
        1,
        96,
        64,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        177,
        128,
        97,
        4,
        9,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        54,
        96,
        16,
        87,
        96,
        14,
        96,
        19,
        86,
        91,
        0,
        91,
        96,
        14,
        91,
        96,
        31,
        96,
        27,
        96,
        33,
        86,
        91,
        96,
        88,
        86,
        91,
        86,
        91,
        96,
        0,
        96,
        83,
        127,
        54,
        8,
        148,
        161,
        59,
        161,
        163,
        33,
        6,
        103,
        200,
        40,
        73,
        45,
        185,
        141,
        202,
        62,
        32,
        118,
        204,
        55,
        53,
        169,
        32,
        163,
        202,
        80,
        93,
        56,
        43,
        188,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        54,
        96,
        0,
        128,
        55,
        96,
        0,
        128,
        54,
        96,
        0,
        132,
        90,
        244,
        61,
        96,
        0,
        128,
        62,
        128,
        128,
        21,
        96,
        118,
        87,
        61,
        96,
        0,
        243,
        91,
        61,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        6,
        202,
        15,
        118,
        22,
        54,
        236,
        217,
        230,
        6,
        132,
        184,
        21,
        218,
        44,
        128,
        115,
        74,
        5,
        125,
        251,
        127,
        14,
        212,
        150,
        218,
        25,
        200,
        208,
        209,
        120,
        0,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        100,
        101,
        108,
        101,
        103,
        97,
        116,
        101,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
    ];
    ///The bytecode of the contract.
    pub static ERC1967PROXY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        54,
        96,
        16,
        87,
        96,
        14,
        96,
        19,
        86,
        91,
        0,
        91,
        96,
        14,
        91,
        96,
        31,
        96,
        27,
        96,
        33,
        86,
        91,
        96,
        88,
        86,
        91,
        86,
        91,
        96,
        0,
        96,
        83,
        127,
        54,
        8,
        148,
        161,
        59,
        161,
        163,
        33,
        6,
        103,
        200,
        40,
        73,
        45,
        185,
        141,
        202,
        62,
        32,
        118,
        204,
        55,
        53,
        169,
        32,
        163,
        202,
        80,
        93,
        56,
        43,
        188,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        54,
        96,
        0,
        128,
        55,
        96,
        0,
        128,
        54,
        96,
        0,
        132,
        90,
        244,
        61,
        96,
        0,
        128,
        62,
        128,
        128,
        21,
        96,
        118,
        87,
        61,
        96,
        0,
        243,
        91,
        61,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        6,
        202,
        15,
        118,
        22,
        54,
        236,
        217,
        230,
        6,
        132,
        184,
        21,
        218,
        44,
        128,
        115,
        74,
        5,
        125,
        251,
        127,
        14,
        212,
        150,
        218,
        25,
        200,
        208,
        209,
        120,
        0,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static ERC1967PROXY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct ERC1967Proxy<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for ERC1967Proxy<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for ERC1967Proxy<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for ERC1967Proxy<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for ERC1967Proxy<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(ERC1967Proxy)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> ERC1967Proxy<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    ERC1967PROXY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ERC1967PROXY_ABI.clone(),
                ERC1967PROXY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Gets the contract's `AdminChanged` event
        pub fn admin_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            AdminChangedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `BeaconUpgraded` event
        pub fn beacon_upgraded_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            BeaconUpgradedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `Upgraded` event
        pub fn upgraded_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            UpgradedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ERC1967ProxyEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for ERC1967Proxy<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "AdminChanged", abi = "AdminChanged(address,address)")]
    pub struct AdminChangedFilter {
        pub previous_admin: ::ethers::core::types::Address,
        pub new_admin: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "BeaconUpgraded", abi = "BeaconUpgraded(address)")]
    pub struct BeaconUpgradedFilter {
        #[ethevent(indexed)]
        pub beacon: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Upgraded", abi = "Upgraded(address)")]
    pub struct UpgradedFilter {
        #[ethevent(indexed)]
        pub implementation: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ERC1967ProxyEvents {
        AdminChangedFilter(AdminChangedFilter),
        BeaconUpgradedFilter(BeaconUpgradedFilter),
        UpgradedFilter(UpgradedFilter),
    }
    impl ::ethers::contract::EthLogDecode for ERC1967ProxyEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = AdminChangedFilter::decode_log(log) {
                return Ok(ERC1967ProxyEvents::AdminChangedFilter(decoded));
            }
            if let Ok(decoded) = BeaconUpgradedFilter::decode_log(log) {
                return Ok(ERC1967ProxyEvents::BeaconUpgradedFilter(decoded));
            }
            if let Ok(decoded) = UpgradedFilter::decode_log(log) {
                return Ok(ERC1967ProxyEvents::UpgradedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for ERC1967ProxyEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AdminChangedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::BeaconUpgradedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::UpgradedFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<AdminChangedFilter> for ERC1967ProxyEvents {
        fn from(value: AdminChangedFilter) -> Self {
            Self::AdminChangedFilter(value)
        }
    }
    impl ::core::convert::From<BeaconUpgradedFilter> for ERC1967ProxyEvents {
        fn from(value: BeaconUpgradedFilter) -> Self {
            Self::BeaconUpgradedFilter(value)
        }
    }
    impl ::core::convert::From<UpgradedFilter> for ERC1967ProxyEvents {
        fn from(value: UpgradedFilter) -> Self {
            Self::UpgradedFilter(value)
        }
    }
}
